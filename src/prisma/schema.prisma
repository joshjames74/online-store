generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Country {
  id         Int       @id @default(autoincrement())
  code       String
  name       String
  image_url  String    @db.Text
  Usr        Usr[]
  Address    Address[]

  @@map("country")
}

model Currency {
  id                Int       @id @default(autoincrement())
  code              String
  symbol            String
  gbp_exchange_rate Float
  Usr               Usr[]
  Product           Product[]
  Order             Order[]

  @@map("currency")
}

model Usr {
  id         Int       @id @default(autoincrement())
  first_name String    @db.VarChar(100)
  user_name  String    @db.VarChar(100)
  sub        String?   @db.VarChar(200)
  title      String?
  country    Country?  @relation(fields: [countryId], references: [id])
  countryId  Int?
  currency   Currency? @relation(fields: [currencyId], references: [id])
  currencyId Int?
  image_url  String
  Product    Product[]
  Address    Address[]
  Order      Order[]
  Review     Review[]
  Basket     Basket[]

  @@map("usr")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String

  products  ProductCategory[]     @relation("CategoryToProduct")

  @@map("category")
}

model Product {
  id            Int        @id @default(autoincrement())
  seller        Usr?       @relation(fields: [sellerId], references: [id])
  sellerId      Int?
  title         String     @db.VarChar(100)
  url           String?
  description   String     @db.Text
  image_url     String     @default("https://webneel.com/daily/sites/default/files/images/daily/08-2018/1-nature-photography-spring-season-mumtazshamsee.jpg")
  image_alt     String     @db.VarChar(100)
  price         Float
  currency      Currency?  @relation(fields: [currencyId], references: [id])
  currencyId    Int?
  review_score  Float      @default(0)
  review_count  Int        @default(0)
  order_count   Int        @default(0)
  categories    ProductCategory[] @relation("ProductToCategory")
  Review        Review[]
  OrderItem     OrderItem[]
  BasketItem    BasketItem[]

  @@map("product")
}

model ProductCategory {
  productId   Int
  categoryId  Int

  product     Product       @relation("ProductToCategory", fields: [productId], references: [id])
  category    Category      @relation("CategoryToProduct", fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Address {
  id          Int      @id @default(autoincrement())
  usr         Usr?    @relation(fields: [usrId], references: [id])
  usrId       Int?
  name        String
  number      String
  street      String
  area_code   String
  country     Country?  @relation(fields: [countryId], references: [id])
  countryId   Int?
  Order       Order[]

  @@map("address")
}

model Order {
  id         Int         @id @default(autoincrement())
  usr        Usr?        @relation(fields: [usrId], references: [id])
  usrId      Int?
  date       DateTime    @default(now())
  currency   Currency?   @relation(fields: [currencyId], references: [id])
  currencyId Int?
  address    Address?    @relation(fields: [addressId], references: [id])
  addressId  Int?
  OrderItem  OrderItem[]

  @@map("order")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  price     Float
  quantity  Int

  @@map("order_item")
}

model Review {
  id         Int      @id @default(autoincrement())
  product    Product? @relation(fields: [productId], references: [id])
  productId  Int?
  usr        Usr?    @relation(fields: [usrId], references: [id])
  usrId      Int?
  score      Int
  title      String
  content    String
  image_urls String
  date       DateTime @default(now())

  @@map("review")
}

model Basket {
  id         Int        @id @default(autoincrement())
  usr        Usr?       @relation(fields: [usrId], references: [id])
  usrId      Int?
  BasketItem BasketItem[]

  @@map("basket")
}

model BasketItem {
  id         Int      @id @default(autoincrement())
  basket     Basket?  @relation(fields: [basketId], references: [id])
  basketId   Int?
  product    Product? @relation(fields: [productId], references: [id])
  productId  Int?
  date_added DateTime
  quantity   Int

  @@map("basket_item")
}
